---
resources:
- name: monitoring-indicator-protocol
  type: git
  icon: package-variant-closed
  source:
    uri: git@github.com:pivotal/monitoring-indicator-protocol.git
    branch: master
    private_key: ((mip-deploy-key.private_key))
    ignore_paths:
    - README.md
    - ci
    - bosh-release/.final_builds
    - bosh-release/releases
    - k8s/examples
- name: indicator-protocol-acceptance-proxy
  type: git
  icon: package-variant-closed
  source:
    uri: git@github.com:pivotal/indicator-protocol-acceptance-proxy.git
    branch: master
    private_key: ((acceptance-proxy-deploy-key.private_key))
- name: env-state
  type: git
  source:
    branch: master
    uri: git@github.com:pivotal-cf/denver-locks.git
    private_key: ((denver-locks-deploy-key.private_key))
- name: release-version
  type: semver
  source:
    driver: gcs
    bucket: monitoring-indicator-protocol
    key: releases/version
    json_key: |
      ((gcp-service-account))
- name: github-release-drafts
  type: github-release
  source:
    user: pivotal
    repository: monitoring-indicator-protocol
    access_token: ((bot-github-access-token))
    drafts: true
- name: k8s-grafana-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/k8s-grafana-indicator-controller
    tag: release-candidate
    username: ((dockerhub-username))
    password: ((dockerhub-password))
- name: interim-k8s-grafana-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/k8s-grafana-indicator-controller
    tag: last-build
    username: ((dockerhub-username))
    password: ((dockerhub-password))
- name: k8s-prometheus-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/k8s-prometheus-indicator-controller
    tag: release-candidate
    username: ((dockerhub-username))
    password: ((dockerhub-password))
- name: interim-k8s-prometheus-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/k8s-prometheus-indicator-controller
    tag: last-build
    username: ((dockerhub-username))
    password: ((dockerhub-password))
- name: k8s-indicator-lifecycle-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/k8s-indicator-lifecycle-controller
    tag: release-candidate
    username: ((dockerhub-username))
    password: ((dockerhub-password))
- name: interim-k8s-indicator-lifecycle-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/k8s-indicator-lifecycle-controller
    tag: last-build
    username: ((dockerhub-username))
    password: ((dockerhub-password))
- name: k8s-indicator-admission-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/k8s-indicator-admission
    tag: release-candidate
    username: ((dockerhub-username))
    password: ((dockerhub-password))
- name: interim-k8s-indicator-admission-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/k8s-indicator-admission
    tag: last-build
    username: ((dockerhub-username))
    password: ((dockerhub-password))
- name: k8s-indicator-status-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/k8s-indicator-status-controller
    tag: release-candidate
    username: ((dockerhub-username))
    password: ((dockerhub-password))
- name: interim-k8s-indicator-status-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/k8s-indicator-status-controller
    tag: last-build
    username: ((dockerhub-username))
    password: ((dockerhub-password))
- name: bosh-indicator-registry-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/bosh-indicator-protocol-registry
    username: ((dockerhub-username))
    password: ((dockerhub-password))
- name: bosh-indicator-registry-proxy-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/bosh-indicator-protocol-registry-proxy
    username: ((dockerhub-username))
    password: ((dockerhub-password))
- name: bosh-indicator-registry-agent-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/bosh-indicator-protocol-registry-agent
    username: ((dockerhub-username))
    password: ((dockerhub-password))
- name: dev-release
  type: gcs-resource
  source:
    bucket: monitoring-indicator-protocol
    json_key: ((gcp-service-account))
    regexp: releases/dev/indicator-protocol-bosh-(.*).tgz
- name: evening
  type: time
  source:
    start: 6:00 PM
    stop: 12:00 AM
    location: America/Denver
    days: [Monday, Tuesday, Wednesday, Thursday, Friday]
- name: notify
  type: slack-notification
  source:
    url: ((slack-webhook-url))

resource_types:
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

jobs:
- name: build-and-test
  plan:
  - get: monitoring-indicator-protocol
    trigger: true
  - task: build-and-test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash

          set -eu

          pushd monitoring-indicator-protocol
            scripts/test.sh
          popd

- name: test-bosh-e2e
  plan:
  - in_parallel:
    - get: env-state
    - get: monitoring-indicator-protocol
      trigger: true
      passed: [build-and-test]
  - task: test-bosh-e2e
    config:
      params:
        BBL_STATE_DIR: acceptance-bosh/indicator-protocol/madlamp
        CF_ADMIN_PASSWORD: ((madlamp-cf-admin-password))
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      - name: env-state

      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -eu

          pushd "env-state/${BBL_STATE_DIR}"
            eval "$(bbl print-env)"
          popd

          pushd monitoring-indicator-protocol
            cf login \
              -a https://api.madlamp.cf-denver.com \
              -u admin -p $CF_ADMIN_PASSWORD \
              -o test \
              -s test
            ./scripts/test.sh bosh_e2e
          popd

- name: indicator-docs
  plan:
  - get: monitoring-indicator-protocol
    passed: [build-and-test]
    trigger: true
  - task: generate-docs
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash

          set -eu

          export GO111MODULE=on

          pushd monitoring-indicator-protocol/
            go run -mod=vendor cmd/format/main.go -format bookbinder -indicators example_indicators.yml
          popd

- name: indicator-verification
  plan:
  - in_parallel:
    - get: monitoring-indicator-protocol
      passed: [build-and-test]
      trigger: true
    - get: env-state
  - task: verify-metric
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      - name: env-state
      params:
        ENVIRONMENT: madlamp
        BBL_STATE_DIR: acceptance-bosh/indicator-protocol/madlamp
        DEPLOYMENT_NAME: cf-01234567890123456789
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash

          set -eu

          pushd "env-state/${BBL_STATE_DIR}"
            eval "$(bbl print-env)"
          popd

          export GO111MODULE=on

          pushd monitoring-indicator-protocol/

            cat << EOF > indicators.yml
          ---
          apiVersion: indicatorprotocol.io/v1
          kind: IndicatorDocument
          spec:
            product:
              name: uaa-test
              version: 0
            indicators:
            - name: uaa_request_rate
              promql: rate(requests_global_status_2xx_count{source_id="uaa"}[10m])
          EOF

            uaa_secret="$(credhub g -n /bosh-${ENVIRONMENT}/${DEPLOYMENT_NAME}/uaa_clients_cc-service-dashboards_secret -j | jq -r .value)"
            access_token=$(curl -X POST "https://login.${ENVIRONMENT}.cf-denver.com/oauth/token" -k -u "apps_metrics_processing:${uaa_secret}" -H 'Accept: application/json' -d 'grant_type=client_credentials'  | jq -r .access_token)

            go run -mod=vendor cmd/verification/main.go -indicators=indicators.yml \
                                                        -authorization="bearer ${access_token}" \
                                                        -query-endpoint=https://metric-store.${ENVIRONMENT}.cf-denver.com \
                                                        -k
          popd

- name: deploy-indicator-registry-to-madlamp
  serial: true
  plan:
  - in_parallel:
    - get: env-state
    - get: monitoring-indicator-protocol
      trigger: true
      passed: [build-and-test]
    - get: indicator-protocol-acceptance-proxy
    - get: release-version
  - task: deploy-registry
    config:
      params:
        ENVIRONMENT: madlamp
        DEPLOYMENT_NAME: cf-01234567890123456789
        BBL_STATE_DIR: acceptance-bosh/indicator-protocol/madlamp
        PROMETHEUS_URI: https://metric-store.madlamp.cf-denver.com
        UAA_URI: https://uaa.madlamp.cf-denver.com
        UAA_CLIENT_ID: healthwatch_admin
        SERVICE_ACCOUNT: ((gcp-service-account))
        EXAMPLE_REPO_PRIVATE_KEY: ((example-repository-private-key))
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      - name: env-state
      - name: release-version
      run:
        path: bash
        args:
        - -c
        - |
          set -e

          pushd "env-state/${BBL_STATE_DIR}"
            eval "$(bbl print-env)"
          popd

          mkdir -p monitoring-indicator-protocol/bosh-release/src/github.com/pivotal/
          rsync -Rr ./monitoring-indicator-protocol/ ./monitoring-indicator-protocol/bosh-release/src/github.com/pivotal/

          BUILD_NUMBER=$(cat release-version/number)
          BUILD_NUMBER=${BUILD_NUMBER}-$(date +"%s")

          pushd monitoring-indicator-protocol/bosh-release

            cat << EOF > config/private.yml
          ---
          blobstore:
            options:
              credentials_source: static
              json_key: |
                ${SERVICE_ACCOUNT}
          EOF

            bosh -n create-release --sha2 --force \
              --version ${BUILD_NUMBER}
            bosh -n upload-release --fix

            bosh update-runtime-config -n \
              --name indicator-document-registration-agent \
              --var=indicator-protocol-version=${BUILD_NUMBER} \
              manifests/agent_runtime_config.yml

          UAA_CLIENT_SECRET=$(credhub g -n /bosh-${ENVIRONMENT}/${DEPLOYMENT_NAME}/uaa_clients_cc-service-dashboards_secret -j | jq -r .value)

          echo "{\"key\": \"${EXAMPLE_REPO_PRIVATE_KEY//[$'\t\r\n']}\"}" | jq .key -r > ./sample-repo-key

          bosh -n -d indicator-protocol deploy \
            manifests/manifest.yml \
            -o ops_files/add-examples-git-source.yml \
            -o ops_files/configure-status-controller.yml \
            -o ops_files/set-indicator-protocol-version.yml \
            -v prometheus_uri=$PROMETHEUS_URI \
            -v uaa_uri=$UAA_URI \
            -v uaa_client_id=$UAA_CLIENT_ID \
            -v uaa_client_secret=$UAA_CLIENT_SECRET \
            -v indicator-protocol-version=$BUILD_NUMBER \
            --var-file=patch_repo_private_key=./sample-repo-key
          popd

          bosh -d indicator-protocol run-errand indicator-smoke-tests

          CF_DEPLOYMENT_NAME=$(bosh deployments --json | jq .Tables[0].Rows | jq '.[] | select( .name | contains("cf"))' | jq .name -r)
          bosh -n -d $CF_DEPLOYMENT_NAME manifest > temp.yml
          bosh -n -d $CF_DEPLOYMENT_NAME deploy temp.yml
          rm temp.yml


  - task: deploy-external-proxy
    config:
      params:
        CF_ADMIN_PASSWORD: ((madlamp-cf-admin-password))
        BBL_STATE_DIR: acceptance-bosh/indicator-protocol/madlamp
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: indicator-protocol-acceptance-proxy
      - name: env-state
      run:
        path: bash
        args:
        - -c
        - |
          set -e

          pushd "env-state/${BBL_STATE_DIR}"
            eval "$(bbl print-env)"
          popd

          pushd indicator-protocol-acceptance-proxy
            bosh -d indicator-protocol scp indicator-protocol:/var/vcap/jobs/indicator-registry-proxy/certs/indicator_protocol_ca.crt ca.crt
            cf login -a https://api.madlamp.cf-denver.com -u admin -p $CF_ADMIN_PASSWORD -o test -s test
            cf push
            ./test_acceptance_proxy.sh
          popd


- name: create-dev-docker-images
  plan:
  - get: monitoring-indicator-protocol
    passed: [build-and-test]
    trigger: true
  - task: create-tag
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: buildpack-deps
          tag: stretch-scm
      inputs:
      - name: monitoring-indicator-protocol
      outputs:
      - name: tag
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -e
          cd monitoring-indicator-protocol
          SHA=$(git rev-parse HEAD)
          cd ..
          echo ${SHA} > tag/tag
  - in_parallel:
    - put: bosh-indicator-registry-docker-repo
      attempts: 2
      params:
        additional_tags: tag/tag
        build: monitoring-indicator-protocol
        dockerfile: monitoring-indicator-protocol/cmd/registry/Dockerfile
    - put: bosh-indicator-registry-proxy-docker-repo
      attempts: 2
      params:
        additional_tags: tag/tag
        build: monitoring-indicator-protocol
        dockerfile: monitoring-indicator-protocol/cmd/registry_proxy/Dockerfile
    - put: bosh-indicator-registry-agent-docker-repo
      attempts: 2
      params:
        additional_tags: tag/tag
        build: monitoring-indicator-protocol
        dockerfile: monitoring-indicator-protocol/cmd/registry_agent/Dockerfile

- name: create-k8s-docker-images
  plan:
  - get: monitoring-indicator-protocol
    passed: [build-and-test]
    trigger: true
  - task: create-tag
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: buildpack-deps
          tag: stretch-scm
      inputs:
      - name: monitoring-indicator-protocol
      outputs:
      - name: tag
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -e
          cd monitoring-indicator-protocol
          SHA=$(git rev-parse HEAD)
          cd ..
          echo ${SHA} > tag/tag
  - in_parallel:
    - put: interim-k8s-grafana-controller-docker-repo
      attempts: 2
      params:
        additional_tags: tag/tag
        tag_as_latest: false
        build: monitoring-indicator-protocol
        dockerfile: monitoring-indicator-protocol/k8s/cmd/grafana-indicator-controller/Dockerfile
    - put: interim-k8s-prometheus-controller-docker-repo
      attempts: 2
      params:
        additional_tags: tag/tag
        tag_as_latest: false
        build: monitoring-indicator-protocol
        dockerfile: monitoring-indicator-protocol/k8s/cmd/prometheus-indicator-controller/Dockerfile
    - put: interim-k8s-indicator-lifecycle-controller-docker-repo
      attempts: 2
      params:
        additional_tags: tag/tag
        tag_as_latest: false
        build: monitoring-indicator-protocol
        dockerfile: monitoring-indicator-protocol/k8s/cmd/indicator-lifecycle-controller/Dockerfile
    - put: interim-k8s-indicator-admission-controller-docker-repo
      attempts: 2
      params:
        additional_tags: tag/tag
        tag_as_latest: false
        build: monitoring-indicator-protocol
        dockerfile: monitoring-indicator-protocol/k8s/cmd/indicator-admission/Dockerfile
    - put: interim-k8s-indicator-status-controller-docker-repo
      attempts: 2
      params:
        additional_tags: tag/tag
        tag_as_latest: false
        build: monitoring-indicator-protocol
        dockerfile: monitoring-indicator-protocol/k8s/cmd/indicator-status-controller/Dockerfile
- name: deploy-k8s-test
  plan:
  - in_parallel:
    - get: monitoring-indicator-protocol
      passed: [create-k8s-docker-images]
      trigger: true
    - get: interim-k8s-grafana-controller-docker-repo
      params: {skip_download: true}
      passed: [create-k8s-docker-images]
    - get: interim-k8s-prometheus-controller-docker-repo
      params: {skip_download: true}
      passed: [create-k8s-docker-images]
    - get: interim-k8s-indicator-lifecycle-controller-docker-repo
      params: {skip_download: true}
      passed: [create-k8s-docker-images]
    - get: interim-k8s-indicator-admission-controller-docker-repo
      params: {skip_download: true}
      passed: [create-k8s-docker-images]
    - get: interim-k8s-indicator-status-controller-docker-repo
      params: {skip_download: true}
      passed: [create-k8s-docker-images]
  - task: deploy-to-gke
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      - name: interim-k8s-grafana-controller-docker-repo
      - name: interim-k8s-prometheus-controller-docker-repo
      - name: interim-k8s-indicator-lifecycle-controller-docker-repo
      - name: interim-k8s-indicator-admission-controller-docker-repo
      - name: interim-k8s-indicator-status-controller-docker-repo
      params:
        SERVICE_ACCOUNT: ((k8s-service-account))
        CLUSTER_NAME: mip-test
        PROJECT_NAME: cf-denver
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -e

          function login {
            echo "$SERVICE_ACCOUNT" > sa.json
            gcloud auth activate-service-account --key-file sa.json
            rm sa.json
            gcloud config set project $PROJECT_NAME
            gcloud container clusters get-credentials "$CLUSTER_NAME" --zone us-central1-a
          }

          function apply_manifests {
              grafana_digest="$(cat interim-k8s-grafana-controller-docker-repo/digest)"
              prometheus_digest="$(cat interim-k8s-prometheus-controller-docker-repo/digest)"
              indicator_lifecycle_digest="$(cat interim-k8s-indicator-lifecycle-controller-docker-repo/digest)"
              indicator_admission_digest="$(cat interim-k8s-indicator-admission-controller-docker-repo/digest)"
              indicator_status_digest="$(cat interim-k8s-indicator-status-controller-docker-repo/digest)"
              pushd monitoring-indicator-protocol/k8s/config > /dev/null
                  kustomize edit set image "indicatorprotocol/k8s-grafana-indicator-controller@$grafana_digest"
                  kustomize edit set image "indicatorprotocol/k8s-prometheus-indicator-controller@$prometheus_digest"
                  kustomize edit set image "indicatorprotocol/k8s-indicator-lifecycle-controller@$indicator_lifecycle_digest"
                  kustomize edit set image "indicatorprotocol/k8s-indicator-admission@$indicator_admission_digest"
                  kustomize edit set image "indicatorprotocol/k8s-indicator-status-controller@$indicator_status_digest"
              popd > /dev/null

              kustomize build monitoring-indicator-protocol/k8s/config | kubectl apply -f -
          }

          function main {
            login
            apply_manifests
          }

          main

- name: test-k8s
  plan:
  - in_parallel:
    - get: interim-k8s-grafana-controller-docker-repo
      params: {skip_download: true}
      passed: [deploy-k8s-test]
    - get: interim-k8s-prometheus-controller-docker-repo
      params: {skip_download: true}
      passed: [deploy-k8s-test]
    - get: interim-k8s-indicator-lifecycle-controller-docker-repo
      params: {skip_download: true}
      passed: [deploy-k8s-test]
    - get: interim-k8s-indicator-admission-controller-docker-repo
      params: {skip_download: true}
      passed: [deploy-k8s-test]
    - get: interim-k8s-indicator-status-controller-docker-repo
      params: {skip_download: true}
      passed: [deploy-k8s-test]
    - get: monitoring-indicator-protocol
      passed: [deploy-k8s-test]
      trigger: true
  - task: run-tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      params:
        SERVICE_ACCOUNT: ((k8s-service-account))
        CLUSTER_NAME: mip-test
        PROJECT_NAME: cf-denver
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -e

          function login {
            echo "$SERVICE_ACCOUNT" > sa.json
            gcloud auth activate-service-account --key-file sa.json
            rm sa.json
            gcloud config set project $PROJECT_NAME
            gcloud container clusters get-credentials "$CLUSTER_NAME" --zone us-central1-a
          }

          function test {
              cd monitoring-indicator-protocol
              ./scripts/test.sh k8s_e2e
          }

          function main {
            login
            test
          }

          main

- name: deploy-k8s-acceptance
  serial: true
  plan:
  - in_parallel:
    - get: monitoring-indicator-protocol
      passed: [test-k8s]
      trigger: true
    - get: interim-k8s-grafana-controller-docker-repo
      params: {skip_download: true}
      passed: [test-k8s]
    - get: interim-k8s-prometheus-controller-docker-repo
      params: {skip_download: true}
      passed: [test-k8s]
    - get: interim-k8s-indicator-lifecycle-controller-docker-repo
      params: {skip_download: true}
      passed: [test-k8s]
    - get: interim-k8s-indicator-admission-controller-docker-repo
      params: {skip_download: true}
      passed: [test-k8s]
    - get: interim-k8s-indicator-status-controller-docker-repo
      params: {skip_download: true}
      passed: [test-k8s]
  - task: deploy-to-gke
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      - name: interim-k8s-grafana-controller-docker-repo
      - name: interim-k8s-prometheus-controller-docker-repo
      - name: interim-k8s-indicator-lifecycle-controller-docker-repo
      - name: interim-k8s-indicator-admission-controller-docker-repo
      - name: interim-k8s-indicator-status-controller-docker-repo
      params:
        SERVICE_ACCOUNT: ((k8s-service-account))
        CLUSTER_NAME: mip-acceptance
        PROJECT_NAME: cf-denver
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -e

          function login {
            echo "$SERVICE_ACCOUNT" > sa.json
            gcloud auth activate-service-account --key-file sa.json
            rm sa.json
            gcloud config set project $PROJECT_NAME
            gcloud container clusters get-credentials "$CLUSTER_NAME" --zone us-central1-a
          }

          function apply_manifests {
              grafana_digest="$(cat interim-k8s-grafana-controller-docker-repo/digest)"
              prometheus_digest="$(cat interim-k8s-prometheus-controller-docker-repo/digest)"
              indicator_lifecycle_digest="$(cat interim-k8s-indicator-lifecycle-controller-docker-repo/digest)"
              indicator_admission_digest="$(cat interim-k8s-indicator-admission-controller-docker-repo/digest)"
              indicator_status_digest="$(cat interim-k8s-indicator-status-controller-docker-repo/digest)"
              pushd monitoring-indicator-protocol/k8s/config > /dev/null
                  kustomize edit set image "indicatorprotocol/k8s-grafana-indicator-controller@$grafana_digest"
                  kustomize edit set image "indicatorprotocol/k8s-prometheus-indicator-controller@$prometheus_digest"
                  kustomize edit set image "indicatorprotocol/k8s-indicator-lifecycle-controller@$indicator_lifecycle_digest"
                  kustomize edit set image "indicatorprotocol/k8s-indicator-admission@$indicator_admission_digest"
                  kustomize edit set image "indicatorprotocol/k8s-indicator-status-controller@$indicator_status_digest"
              popd > /dev/null

              kustomize build monitoring-indicator-protocol/k8s/config | kubectl apply -f -
          }

          function main {
            login
            apply_manifests
          }

          main

- name: promote-docker-images
  serial: true
  plan:
  - in_parallel:
    - get: interim-k8s-grafana-controller-docker-repo
      params: {save: true}
      passed: [test-k8s]
    - get: interim-k8s-prometheus-controller-docker-repo
      params: {save: true}
      passed: [test-k8s]
    - get: interim-k8s-indicator-lifecycle-controller-docker-repo
      params: {save: true}
      passed: [test-k8s]
    - get: interim-k8s-indicator-admission-controller-docker-repo
      params: {save: true}
      passed: [test-k8s]
    - get: interim-k8s-indicator-status-controller-docker-repo
      params: {save: true}
      passed: [test-k8s]
    - get: monitoring-indicator-protocol
      passed: [test-k8s]
      trigger: true
  - in_parallel:
    - put: k8s-grafana-controller-docker-repo
      params:
        tag_as_latest: false
        load: interim-k8s-grafana-controller-docker-repo
    - put: k8s-prometheus-controller-docker-repo
      params:
        tag_as_latest: false
        load: interim-k8s-prometheus-controller-docker-repo
    - put: k8s-indicator-lifecycle-controller-docker-repo
      params:
        tag_as_latest: false
        load: interim-k8s-indicator-lifecycle-controller-docker-repo
    - put: k8s-indicator-admission-controller-docker-repo
      params:
        tag_as_latest: false
        load: interim-k8s-indicator-admission-controller-docker-repo
    - put: k8s-indicator-status-controller-docker-repo
      params:
        tag_as_latest: false
        load: interim-k8s-indicator-status-controller-docker-repo
- name: create-dev-release
  plan:
  - in_parallel:
    - get: evening
      trigger: true
    - get: monitoring-indicator-protocol
      passed: [indicator-verification,indicator-docs,deploy-indicator-registry-to-madlamp,promote-docker-images]
      trigger: false
    - get: release-version
      params:
        pre: build
    - get: k8s-grafana-controller-docker-repo
      params: {save: true}
      passed: [promote-docker-images]
    - get: k8s-prometheus-controller-docker-repo
      params: {save: true}
      passed: [promote-docker-images]
    - get: k8s-indicator-lifecycle-controller-docker-repo
      params: {save: true}
      passed: [promote-docker-images]
    - get: k8s-indicator-admission-controller-docker-repo
      params: {save: true}
      passed: [promote-docker-images]
    - get: k8s-indicator-status-controller-docker-repo
      params: {save: true}
      passed: [promote-docker-images]
  - task: create-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: release-version
      - name: monitoring-indicator-protocol
      outputs:
      - name: created-release
      params:
        RELEASE_NAME: indicator-protocol
        RELEASE_BLOBSTORE_BUCKET: monitoring-indicator-protocol-bosh-blobs
        SERVICE_ACCOUNT: ((gcp-service-account))
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -e

          BUILD_NUMBER="$(cat release-version/number)"

          mkdir -p monitoring-indicator-protocol/bosh-release/src/github.com/pivotal
          rsync -Rr ./monitoring-indicator-protocol/ ./monitoring-indicator-protocol/bosh-release/src/github.com/pivotal/

          pushd monitoring-indicator-protocol/bosh-release
            cat << EOF > config/private.yml
          ---
          blobstore:
            provider: gcs
            options:
              bucket_name: ${RELEASE_BLOBSTORE_BUCKET}
              credentials_source: static
              json_key: |
                ${SERVICE_ACCOUNT}
          EOF

            bosh -n create-release --sha2 --force \
              --version ${BUILD_NUMBER} \
              --tarball ../../created-release/${RELEASE_NAME}-bosh-${BUILD_NUMBER}.tgz
          popd
  - in_parallel:
    - put: dev-release
      params:
        file: created-release/*.tgz
    - put: release-version
      params:
        pre: build

- name: finalize-release
  serial: true
  plan:
  - in_parallel:
    - get: monitoring-indicator-protocol
      passed:
      - create-dev-release
    - get: release-version
      params:
        bump: final
    - get: k8s-grafana-controller-docker-repo
      params: {save: true}
      passed:
      - create-dev-release
    - get: k8s-prometheus-controller-docker-repo
      params: {save: true}
      passed:
      - create-dev-release
    - get: k8s-indicator-lifecycle-controller-docker-repo
      params: {save: true}
      passed:
      - create-dev-release
    - get: k8s-indicator-admission-controller-docker-repo
      params: {save: true}
      passed:
      - create-dev-release
    - get: k8s-indicator-status-controller-docker-repo
      params: {save: true}
      passed:
      - create-dev-release
    - get: bosh-indicator-registry-docker-repo
      params: {save: true}
      passed:
      - create-dev-docker-images
    - get: bosh-indicator-registry-proxy-docker-repo
      params: {save: true}
      passed:
      - create-dev-docker-images
    - get: bosh-indicator-registry-agent-docker-repo
      params: {save: true}
      passed:
      - create-dev-docker-images
    - get: dev-release
      passed:
      - create-dev-release
  - task: create-final-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: release-version
      - name: monitoring-indicator-protocol
      - name: dev-release
      outputs:
      - name: final-release
      - name: github-release
      params:
        RELEASE_NAME: indicator-protocol
        RELEASE_BLOBSTORE_BUCKET: monitoring-indicator-protocol-bosh-blobs
        SERVICE_ACCOUNT: ((gcp-service-account))
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -e

          BUILD_NUMBER=$(cat release-version/number)
          tag_name="v$BUILD_NUMBER"

          # write out github release files
          echo "${RELEASE_NAME} ${tag_name}" > github-release/name
          echo $tag_name > github-release/tag
          echo "TBD" > github-release/body

          mkdir -p monitoring-indicator-protocol/bosh-release/src/github.com/pivotal
          rsync -Rr ./monitoring-indicator-protocol/ ./monitoring-indicator-protocol/bosh-release/src/github.com/pivotal/

          pushd monitoring-indicator-protocol/bosh-release
            cat << EOF > config/private.yml
          ---
          blobstore:
            provider: gcs
            options:
              bucket_name: ${RELEASE_BLOBSTORE_BUCKET}
              credentials_source: static
              json_key: |
                ${SERVICE_ACCOUNT}
          EOF

            bosh -n finalize-release --sha2 \
              --version "$BUILD_NUMBER" \
              ../../dev-release/*.tgz

            bosh -n create-release --sha2 \
              --tarball ../../github-release/${RELEASE_NAME}-bosh-${BUILD_NUMBER}.tgz \
              --version "$BUILD_NUMBER" \
              releases/monitoring-indicator-protocol/monitoring-indicator-protocol-${BUILD_NUMBER}.yml

            bosh_tarball_shasum="$(shasum ../../github-release/${RELEASE_NAME}-bosh-${BUILD_NUMBER}.tgz | cut -f -1 -d " ")"

            git add .
            git config --global user.email "indicator-protocol@pivotal.io"
            git config --global user.name "indicator-protocol-bot"
            git commit -m "Create final release\

            [ci skip]"
          popd
          echo "BOSH release sha1: ${bosh_tarball_shasum}" >> github-release/body


          cp -r "monitoring-indicator-protocol/." "final-release/"
  - task: publish-github-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      - name: release-version
      - name: github-release
      outputs:
      - name: github-release
        path: github-release-output
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -e

          cp github-release/* github-release-output/

          BUILD_NUMBER=$(cat release-version/number)

          pushd monitoring-indicator-protocol
            echo "Building darwin cli-plugin binary"
            GOARCH=amd64 GOOS=darwin go build -mod=vendor -o ../github-release-output/indicator-format-macosx64-${BUILD_NUMBER} cmd/format/main.go
            GOARCH=amd64 GOOS=darwin go build -mod=vendor -o ../github-release-output/indicator-verification-macosx64-${BUILD_NUMBER} cmd/verification/main.go

            echo "Building amd64 linux cli-plugin binary"
            GOARCH=amd64 GOOS=linux go build -mod=vendor -o ../github-release-output/indicator-format-linux64-${BUILD_NUMBER} cmd/format/main.go
            GOARCH=amd64 GOOS=linux go build -mod=vendor -o ../github-release-output/indicator-verification-linux64-${BUILD_NUMBER} cmd/verification/main.go

            echo "$(git rev-parse HEAD)" > ../github-release-output/reposha
          popd
  - task: prefix-version-number
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: buildpack-deps
          tag: stretch-scm
      inputs:
      - name: release-version
      outputs:
      - name: prefixed-release-version
      - name: slack-message
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -e
          number=$(cat "./release-version/number")
          echo v${number} > prefixed-release-version/version
          echo "Indicator Protocol v${number} has been released :indipro:" > slack-message/text.txt
  - put: monitoring-indicator-protocol
    params:
      repository: monitoring-indicator-protocol
      rebase: true
      tag: release-version/version
      tag_prefix: v
  - put: monitoring-indicator-protocol
    params:
      repository: final-release
      rebase: true
  - put: github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      commitish: github-release/reposha
      globs:
      - github-release/indicator-*
  - put: release-version
    params:
      bump: patch
  - in_parallel:
    - put: k8s-grafana-controller-docker-repo
      params:
        additional_tags: prefixed-release-version/version
        tag_as_latest: true
        load: k8s-grafana-controller-docker-repo
    - put: k8s-prometheus-controller-docker-repo
      params:
        additional_tags: prefixed-release-version/version
        tag_as_latest: true
        load: k8s-prometheus-controller-docker-repo
    - put: k8s-indicator-lifecycle-controller-docker-repo
      params:
        additional_tags: prefixed-release-version/version
        tag_as_latest: true
        load: k8s-indicator-lifecycle-controller-docker-repo
    - put: k8s-indicator-admission-controller-docker-repo
      params:
        additional_tags: prefixed-release-version/version
        tag_as_latest: true
        load: k8s-indicator-admission-controller-docker-repo
    - put: k8s-indicator-status-controller-docker-repo
      params:
        additional_tags: prefixed-release-version/version
        tag_as_latest: true
        load: k8s-indicator-status-controller-docker-repo
    - put: bosh-indicator-registry-docker-repo
      params:
        additional_tags: prefixed-release-version/version
        tag_as_latest: true
        load: bosh-indicator-registry-docker-repo
    - put: bosh-indicator-registry-proxy-docker-repo
      params:
        additional_tags: prefixed-release-version/version
        tag_as_latest: true
        load: bosh-indicator-registry-proxy-docker-repo
    - put: bosh-indicator-registry-agent-docker-repo
      params:
        additional_tags: prefixed-release-version/version
        tag_as_latest: true
        load: bosh-indicator-registry-agent-docker-repo
  - put: notify
    params:
      text_file: ./slack-message/text.txt

- name: bump-patch-version
  plan:
  - put: release-version
    params:
      bump: patch
- name: bump-minor-version
  plan:
  - put: release-version
    params:
      bump: minor
- name: bump-major-version
  plan:
  - put: release-version
    params:
      bump: major
