---
resources:
- name: monitoring-indicator-protocol
  type: git
  source:
    uri: https://github.com/pivotal/monitoring-indicator-protocol
    branch: master
    username: git
    password: {{indicator-protocol-access-token}}
    ignore_paths:
    - README.md
    - ci
    - bosh-release/.final_builds
    - bosh-release/releases
- name: env-state
  type: git
  source:
    branch: master
    uri: git@github.com:pivotal-cf/denver-locks.git
    private_key: {{event-producer-github-key}}
- name: release-version
  type: semver
  source:
    initial_version: 0.0.1
    driver: s3
    bucket: indicator-protocol-release-version
    region_name: us-east-2
    key: version
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}
- name: github-release-drafts
  type: github-release
  source:
    user: pivotal
    repository: monitoring-indicator-protocol
    access_token: {{indicator-protocol-access-token}}
    drafts: true
- name: grafana-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/grafana-indicator-controller
    tag: release-candidate
    username: {{dockerhub-username}}
    password: {{dockerhub-password}}
- name: interim-grafana-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/grafana-indicator-controller
    tag: last-build
    username: {{dockerhub-username}}
    password: {{dockerhub-password}}
- name: prometheus-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/prometheus-indicator-controller
    tag: release-candidate
    username: {{dockerhub-username}}
    password: {{dockerhub-password}}
- name: interim-prometheus-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/prometheus-indicator-controller
    tag: last-build
    username: {{dockerhub-username}}
    password: {{dockerhub-password}}
- name: indicator-lifecycle-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/indicator-lifecycle-controller
    tag: release-candidate
    username: {{dockerhub-username}}
    password: {{dockerhub-password}}
- name: interim-indicator-lifecycle-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/indicator-lifecycle-controller
    tag: last-build
    username: {{dockerhub-username}}
    password: {{dockerhub-password}}
- name: indicator-admission-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/indicator-admission
    tag: release-candidate
    username: {{dockerhub-username}}
    password: {{dockerhub-password}}
- name: interim-indicator-admission-controller-docker-repo
  type: docker-image
  source:
    repository: indicatorprotocol/indicator-admission
    tag: last-build
    username: {{dockerhub-username}}
    password: {{dockerhub-password}}

jobs:
- name: build-and-test
  plan:
  - get: monitoring-indicator-protocol
    trigger: true
  - task: build-and-test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      run:
        path: bash
        args:
          - -c
          - |
            #!/usr/bin/env bash

            set -exu

            pushd monitoring-indicator-protocol
              scripts/test.sh
            popd

- name: indicator-docs
  plan:
  - get: monitoring-indicator-protocol
    passed: [build-and-test]
    trigger: true
  - task: generate-docs
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash

          set -exu

          export GO111MODULE=on

          pushd monitoring-indicator-protocol/
            go run -mod=vendor cmd/format/main.go -format bookbinder -indicators example_indicators.yml
          popd

- name: indicator-verification
  plan:
  - aggregate:
    - get: monitoring-indicator-protocol
      passed: [build-and-test]
      trigger: true
    - get: env-state
  - task: verify-metric
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      - name: env-state
      params:
        ENVIRONMENT: sunstorm
        BBL_STATE_DIR: acceptance-bosh/claimed/sunstorm
        DEPLOYMENT_NAME: cf-01234567890123456789
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash

          set -exu

          set +x
          pushd "env-state/${BBL_STATE_DIR}"
            eval "$(bbl print-env)"
          popd
          set -x

          export GO111MODULE=on

          pushd monitoring-indicator-protocol/

            cat << EOF > indicators.yml
          ---
          apiVersion: v0
          product:
            name: uaa-test
            version: 0
          indicators:
          - name: uaa_request_rate
            promql: rate(requests_global_status_2xx_count{source_id="uaa"}[10m])
          EOF

            uaa_secret="$(credhub g -n /bosh-${ENVIRONMENT}/${DEPLOYMENT_NAME}/uaa_clients_firehose_exporter_secret -j | jq -r .value)"
            access_token=$(curl -X POST "https://login.${ENVIRONMENT}.cf-denver.com/oauth/token" -k -u "firehose_exporter:${uaa_secret}" -H 'Accept: application/json' -d 'grant_type=client_credentials'  | jq -r .access_token)

            go run -mod=vendor cmd/verification/main.go -indicators=indicators.yml \
                                                        -authorization="bearer ${access_token}" \
                                                        -query-endpoint=https://log-cache.${ENVIRONMENT}.cf-denver.com \
                                                        -k

          popd

- name: deploy-indicator-registry
  plan:
  - aggregate:
    - get: env-state
    - get: monitoring-indicator-protocol
      trigger: true
      passed: [build-and-test]
  - task: deploy
    config:
      params:
        ENVIRONMENT: madlamp
        DEPLOYMENT_NAME: cf-01234567890123456789
        BBL_STATE_DIR: acceptance-bosh/indicator-protocol/madlamp
        S3_ACCESS_KEY: {{aws-access-key-id}}
        S3_SECRET_KEY: {{aws-secret-access-key}}
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      - name: env-state
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          set +x
          pushd "env-state/${BBL_STATE_DIR}"
            eval "$(bbl print-env)"
          popd
          set -x

          mkdir -p monitoring-indicator-protocol/bosh-release/src/github.com/pivotal/
          rsync -Rr ./monitoring-indicator-protocol/ ./monitoring-indicator-protocol/bosh-release/src/github.com/pivotal/

          pushd monitoring-indicator-protocol/bosh-release

            cat << EOF > config/private.yml
          ---
          blobstore:
            options:
              access_key_id: ${S3_ACCESS_KEY}
              secret_access_key: ${S3_SECRET_KEY}
          EOF

            bosh create-release --force
            bosh -n upload-release --fix --rebase

            bosh update-runtime-config -n \
              --name indicator-registration-agent \
              --var=indicator-protocol-version=$(bosh releases | grep indicator-protocol -m1 | cut -f2) \
              manifests/agent_runtime_config.yml
          popd

          cat << EOF > add-examples-git-source.yml
          ---
          - type: replace
            path: /instance_groups/name=indicator-registry/jobs/name=indicator-registry/properties/sources?/-
            value:
              type: git
              repository: https://github.com/joerodriguez/indicator-protocol-examples
          EOF

          cat << EOF > add-metric-store-creds.yml
          ---
          - type: replace
            path: /instance_groups/name=indicator-registry/jobs/name=status-controller/properties
            value:
              prometheus_uri: https://metric-store.madlamp.cf-denver.com
              ssl:
                skip_cert_verify: true
              uaa_uri: https://uaa.madlamp.cf-denver.com
              uaa_client_id: admin
              uaa_client_secret: $(credhub g -n /bosh-${ENVIRONMENT}/${DEPLOYMENT_NAME}/uaa_admin_client_secret -j | jq -r .value)
          EOF

          bosh -n -d indicator-registry deploy \
            monitoring-indicator-protocol/bosh-release/manifests/manifest.yml \
            -o add-examples-git-source.yml \
            -o add-metric-store-creds.yml

- name: create-docker-images
  plan:
  - get: monitoring-indicator-protocol
    passed: [build-and-test]
    trigger: true
  - task: create-tag
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: buildpack-deps
          tag: stretch-scm
      inputs:
      - name: monitoring-indicator-protocol
      outputs:
      - name: tag
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -ex
          cd monitoring-indicator-protocol
          SHA=$(git rev-parse HEAD)
          cd ..
          echo ${SHA} > tag/tag
  - aggregate:
    - put: interim-grafana-controller-docker-repo
      params:
        additional_tags: tag/tag
        tag_as_latest: false
        build: monitoring-indicator-protocol
        dockerfile: monitoring-indicator-protocol/k8s/cmd/grafana-indicator-controller/Dockerfile
    - put: interim-prometheus-controller-docker-repo
      params:
        additional_tags: tag/tag
        tag_as_latest: false
        build: monitoring-indicator-protocol
        dockerfile: monitoring-indicator-protocol/k8s/cmd/prometheus-indicator-controller/Dockerfile
    - put: interim-indicator-lifecycle-controller-docker-repo
      params:
        additional_tags: tag/tag
        tag_as_latest: false
        build: monitoring-indicator-protocol
        dockerfile: monitoring-indicator-protocol/k8s/cmd/indicator-lifecycle-controller/Dockerfile
    - put: interim-indicator-admission-controller-docker-repo
      params:
        additional_tags: tag/tag
        tag_as_latest: false
        build: monitoring-indicator-protocol
        dockerfile: monitoring-indicator-protocol/k8s/cmd/indicator-admission/Dockerfile

- name: deploy-k8s-test
  plan:
  - aggregate:
    - get: monitoring-indicator-protocol
      passed: [create-docker-images]
      trigger: true
    - get: interim-grafana-controller-docker-repo
      params: {skip_download: true}
      passed: [create-docker-images]
    - get: interim-prometheus-controller-docker-repo
      params: {skip_download: true}
      passed: [create-docker-images]
    - get: interim-indicator-lifecycle-controller-docker-repo
      params: {skip_download: true}
      passed: [create-docker-images]
    - get: interim-indicator-admission-controller-docker-repo
      params: {skip_download: true}
      passed: [create-docker-images]
  - task: deploy-to-gke
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
        - name: monitoring-indicator-protocol
        - name: interim-grafana-controller-docker-repo
        - name: interim-prometheus-controller-docker-repo
        - name: interim-indicator-lifecycle-controller-docker-repo
        - name: interim-indicator-admission-controller-docker-repo
      params:
        SERVICE_ACCOUNT: {{gcp-service-account}}
        CLUSTER_NAME: mip-test
        PROJECT_NAME: cf-denver
      run:
        path: bash
        args:
          - -c
          - |
            #!/usr/bin/env bash
            set -e

            function login {
              echo "$SERVICE_ACCOUNT" > sa.json
              gcloud auth activate-service-account --key-file sa.json
              rm sa.json
              gcloud config set project $PROJECT_NAME
              gcloud container clusters get-credentials "$CLUSTER_NAME" --zone us-central1-a
            }

            function apply_manifests {
                grafana_digest="$(cat interim-grafana-controller-docker-repo/digest)"
                prometheus_digest="$(cat interim-prometheus-controller-docker-repo/digest)"
                indicator_lifecycle_digest="$(cat interim-indicator-lifecycle-controller-docker-repo/digest)"
                indicator_admission_digest="$(cat interim-indicator-admission-controller-docker-repo/digest)"
                pushd monitoring-indicator-protocol/k8s/config > /dev/null
                    kustomize edit set image "indicatorprotocol/grafana-indicator-controller@$grafana_digest"
                    kustomize edit set image "indicatorprotocol/prometheus-indicator-controller@$prometheus_digest"
                    kustomize edit set image "indicatorprotocol/indicator-lifecycle-controller@$indicator_lifecycle_digest"
                    kustomize edit set image "indicatorprotocol/indicator-admission@$indicator_admission_digest"
                popd > /dev/null

                kustomize build monitoring-indicator-protocol/k8s/config | kubectl apply -f -
            }

            function main {
              login
              apply_manifests
            }

            main

- name: test-k8s
  plan:
  - aggregate:
    - get: interim-grafana-controller-docker-repo
      params: {skip_download: true}
      passed: [deploy-k8s-test]
    - get: interim-prometheus-controller-docker-repo
      params: {skip_download: true}
      passed: [deploy-k8s-test]
    - get: interim-indicator-lifecycle-controller-docker-repo
      params: {skip_download: true}
      passed: [deploy-k8s-test]
    - get: interim-indicator-admission-controller-docker-repo
      params: {skip_download: true}
      passed: [deploy-k8s-test]
    - get: monitoring-indicator-protocol
      passed: [deploy-k8s-test]
      trigger: true
  - task: run-tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
        - name: monitoring-indicator-protocol
      params:
        SERVICE_ACCOUNT: {{gcp-service-account}}
        CLUSTER_NAME: mip-test
        PROJECT_NAME: cf-denver
      run:
        path: bash
        args:
          - -c
          - |
            #!/usr/bin/env bash
            set -e

            function login {
              echo "$SERVICE_ACCOUNT" > sa.json
              gcloud auth activate-service-account --key-file sa.json
              rm sa.json
              gcloud config set project $PROJECT_NAME
              gcloud container clusters get-credentials "$CLUSTER_NAME" --zone us-central1-a
            }

            function test {
                cd monitoring-indicator-protocol
                ./scripts/test.sh e2e
            }

            function main {
              login
              test
            }

            main

- name: deploy-k8s-acceptance
  plan:
  - aggregate:
    - get: monitoring-indicator-protocol
      passed: [test-k8s]
      trigger: true
    - get: interim-grafana-controller-docker-repo
      params: {skip_download: true}
      passed: [test-k8s]
    - get: interim-prometheus-controller-docker-repo
      params: {skip_download: true}
      passed: [test-k8s]
    - get: interim-indicator-lifecycle-controller-docker-repo
      params: {skip_download: true}
      passed: [test-k8s]
    - get: interim-indicator-admission-controller-docker-repo
      params: {skip_download: true}
      passed: [test-k8s]
  - task: deploy-to-gke
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      - name: interim-grafana-controller-docker-repo
      - name: interim-prometheus-controller-docker-repo
      - name: interim-indicator-lifecycle-controller-docker-repo
      - name: interim-indicator-admission-controller-docker-repo
      params:
        SERVICE_ACCOUNT: {{gcp-service-account}}
        CLUSTER_NAME: mip-acceptance
        PROJECT_NAME: cf-denver
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -e

          function login {
            echo "$SERVICE_ACCOUNT" > sa.json
            gcloud auth activate-service-account --key-file sa.json
            rm sa.json
            gcloud config set project $PROJECT_NAME
            gcloud container clusters get-credentials "$CLUSTER_NAME" --zone us-central1-a
          }

          function apply_manifests {
              grafana_digest="$(cat interim-grafana-controller-docker-repo/digest)"
              prometheus_digest="$(cat interim-prometheus-controller-docker-repo/digest)"
              indicator_lifecycle_digest="$(cat interim-indicator-lifecycle-controller-docker-repo/digest)"
              indicator_admission_digest="$(cat interim-indicator-admission-controller-docker-repo/digest)"
              pushd monitoring-indicator-protocol/k8s/config > /dev/null
                  kustomize edit set image "indicatorprotocol/grafana-indicator-controller@$grafana_digest"
                  kustomize edit set image "indicatorprotocol/prometheus-indicator-controller@$prometheus_digest"
                  kustomize edit set image "indicatorprotocol/indicator-lifecycle-controller@$indicator_lifecycle_digest"
                  kustomize edit set image "indicatorprotocol/indicator-admission@$indicator_admission_digest"
              popd > /dev/null

              kustomize build monitoring-indicator-protocol/k8s/config | kubectl apply -f -
          }

          function main {
            login
            apply_manifests
          }

          main

- name: promote-docker-images
  plan:
  - aggregate:
    - get: interim-grafana-controller-docker-repo
      params: {save: true}
      passed: [test-k8s]
    - get: interim-prometheus-controller-docker-repo
      params: {save: true}
      passed: [test-k8s]
    - get: interim-indicator-lifecycle-controller-docker-repo
      params: {save: true}
      passed: [test-k8s]
    - get: interim-indicator-admission-controller-docker-repo
      params: {save: true}
      passed: [test-k8s]
    - get: monitoring-indicator-protocol
      passed: [test-k8s]
      trigger: true
  - aggregate:
    - put: grafana-controller-docker-repo
      params:
        tag_as_latest: false
        load: interim-grafana-controller-docker-repo
    - put: prometheus-controller-docker-repo
      params:
        tag_as_latest: false
        load: interim-prometheus-controller-docker-repo
    - put: indicator-lifecycle-controller-docker-repo
      params:
        tag_as_latest: false
        load: interim-indicator-lifecycle-controller-docker-repo
    - put: indicator-admission-controller-docker-repo
      params:
        tag_as_latest: false
        load: interim-indicator-admission-controller-docker-repo

- name: publish-release
  plan:
  - aggregate:
    - get: monitoring-indicator-protocol
      passed: [indicator-verification,indicator-docs,deploy-indicator-registry,promote-docker-images]
      trigger: false
    - get: release-version
      params: {}
    - get: grafana-controller-docker-repo
      params: {save: true}
      passed: [promote-docker-images]
    - get: prometheus-controller-docker-repo
      params: {save: true}
      passed: [promote-docker-images]
    - get: indicator-lifecycle-controller-docker-repo
      params: {save: true}
      passed: [promote-docker-images]
    - get: indicator-admission-controller-docker-repo
      params: {save: true}
      passed: [promote-docker-images]
  - task: create-final-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: release-version
      - name: monitoring-indicator-protocol
      outputs:
      - name: final-release
      - name: github-release
      params:
        RELEASE_NAME: indicator-protocol
        S3_BUCKET: cf-indicators-bosh-blubs
        S3_ACCESS_KEY: {{aws-access-key-id}}
        S3_SECRET_KEY: {{aws-secret-access-key}}
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -ex

          BUILD_NUMBER=$(cat release-version/number)
          tag_name="v$BUILD_NUMBER"

          # write out github release files
          echo "${RELEASE_NAME} ${tag_name}" > github-release/name
          echo $tag_name > github-release/tag
          echo "TBD" > github-release/body

          mkdir -p monitoring-indicator-protocol/bosh-release/src/github.com/pivotal
          rsync -Rr ./monitoring-indicator-protocol/ ./monitoring-indicator-protocol/bosh-release/src/github.com/pivotal/

          pushd monitoring-indicator-protocol/bosh-release
            cat << EOF > config/private.yml
          ---
          blobstore:
            provider: s3
            options:
              bucket_name: ${S3_BUCKET}
              access_key_id: ${S3_ACCESS_KEY}
              secret_access_key: ${S3_SECRET_KEY}
          EOF

            bosh -n create-release --sha2 --final --force \
              --tarball ../../github-release/${RELEASE_NAME}-bosh-${BUILD_NUMBER}.tgz \
              --version "$BUILD_NUMBER"
            git add .

            git config --global user.email "cf-event-producer@pivotal.io"
            git config --global user.name "event-producer-cibot"
            git commit -m "Create final release\

            [ci skip]"
          popd

          cp -r "monitoring-indicator-protocol/." "final-release/"
  - task: publish-github-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: indicatorprotocol/test-base
      inputs:
      - name: monitoring-indicator-protocol
      - name: release-version
      - name: github-release
      outputs:
      - name: github-release
        path: github-release-output
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -ex

          cp github-release/* github-release-output/

          BUILD_NUMBER=$(cat release-version/number)

          pushd monitoring-indicator-protocol
            echo "Building darwin cli-plugin binary"
            GOARCH=amd64 GOOS=darwin go build -mod=vendor -o ../github-release-output/indicator-format-macosx64-${BUILD_NUMBER} cmd/format/main.go
            GOARCH=amd64 GOOS=darwin go build -mod=vendor -o ../github-release-output/indicator-verification-macosx64-${BUILD_NUMBER} cmd/verification/main.go

            echo "Building amd64 linux cli-plugin binary"
            GOARCH=amd64 GOOS=linux go build -mod=vendor -o ../github-release-output/indicator-format-linux64-${BUILD_NUMBER} cmd/format/main.go
            GOARCH=amd64 GOOS=linux go build -mod=vendor -o ../github-release-output/indicator-verification-linux64-${BUILD_NUMBER} cmd/verification/main.go
          popd
  - task: prefix-version-number
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: buildpack-deps
          tag: stretch-scm
      inputs:
      - name: release-version
      outputs:
      - name: prefixed-release-version
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -ex
          number=$(cat "./release-version/number")
          echo v${number} > prefixed-release-version/version
  - put: monitoring-indicator-protocol
    params:
      repository: monitoring-indicator-protocol
      rebase: true
      tag: release-version/version
      tag_prefix: v
  - put: monitoring-indicator-protocol
    params:
      repository: final-release
      rebase: true
  - put: github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/indicator-*
  - aggregate:
    - put: grafana-controller-docker-repo
      params:
        additional_tags: prefixed-release-version/version
        tag_as_latest: true
        load: grafana-controller-docker-repo
    - put: prometheus-controller-docker-repo
      params:
        additional_tags: prefixed-release-version/version
        tag_as_latest: true
        load: prometheus-controller-docker-repo
    - put: indicator-lifecycle-controller-docker-repo
      params:
        additional_tags: prefixed-release-version/version
        tag_as_latest: true
        load: indicator-lifecycle-controller-docker-repo
    - put: indicator-admission-controller-docker-repo
      params:
        additional_tags: prefixed-release-version/version
        tag_as_latest: true
        load: indicator-admission-controller-docker-repo

- name: bump-release-version
  plan:
  - aggregate:
    - get: monitoring-indicator-protocol
      passed: [publish-release]
      trigger: true
  - put: release-version
    params:
      bump: patch
