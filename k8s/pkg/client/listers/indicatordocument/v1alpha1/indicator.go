/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pivotal/monitoring-indicator-protocol/k8s/pkg/apis/indicatordocument/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IndicatorLister helps list Indicators.
type IndicatorLister interface {
	// List lists all Indicators in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Indicator, err error)
	// Indicators returns an object that can list and get Indicators.
	Indicators(namespace string) IndicatorNamespaceLister
	IndicatorListerExpansion
}

// indicatorLister implements the IndicatorLister interface.
type indicatorLister struct {
	indexer cache.Indexer
}

// NewIndicatorLister returns a new IndicatorLister.
func NewIndicatorLister(indexer cache.Indexer) IndicatorLister {
	return &indicatorLister{indexer: indexer}
}

// List lists all Indicators in the indexer.
func (s *indicatorLister) List(selector labels.Selector) (ret []*v1alpha1.Indicator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Indicator))
	})
	return ret, err
}

// Indicators returns an object that can list and get Indicators.
func (s *indicatorLister) Indicators(namespace string) IndicatorNamespaceLister {
	return indicatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IndicatorNamespaceLister helps list and get Indicators.
type IndicatorNamespaceLister interface {
	// List lists all Indicators in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Indicator, err error)
	// Get retrieves the Indicator from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Indicator, error)
	IndicatorNamespaceListerExpansion
}

// indicatorNamespaceLister implements the IndicatorNamespaceLister
// interface.
type indicatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Indicators in the indexer for a given namespace.
func (s indicatorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Indicator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Indicator))
	})
	return ret, err
}

// Get retrieves the Indicator from the indexer for a given namespace and name.
func (s indicatorNamespaceLister) Get(name string) (*v1alpha1.Indicator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("indicator"), name)
	}
	return obj.(*v1alpha1.Indicator), nil
}
